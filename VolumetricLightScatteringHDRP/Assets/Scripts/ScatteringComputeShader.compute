// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture3D<float4> DensityBuffer;
RWTexture3D<float4> LightBuffer;
RWTexture3D<float4> Result;
Texture2D<float4> CamDepth;
SamplerState samplerCamDepth;
StructuredBuffer<float> depths;
uint VOLUME_DEPTH;
float4 insetValue;
float4 size;
float4 _ZBufferParams;

bool EarlyOut(uint3 id, float4 size)
{
    return (id.x >= size.x || id.y >= size.y || id.z >= size.z);
}

//Beer-Lambert's Law?
//One Step
float4 AccumulateScattering(float4 colorAndDensityFront, float4 colorAndDensityBack, in float depth)
{
    float densityFront = colorAndDensityFront.a;
    float densityBack = colorAndDensityBack.a ;
    float3 colorFront = colorAndDensityFront.rgb;
    float3 colorBack = colorAndDensityBack.rgb;
    
    float factorColorBack = max(0, min(1, exp(-densityFront)));//saturate
    float3 light = colorFront + factorColorBack*colorBack;
    return float4(light.rgb, (densityFront + densityBack));//*(1-depth));
    
    //float3 light = colorAndDensityFront.rgb + saturate(exp(-colorAndDensityFront.a))*colorAndDensityBack.rgb;
    //return float4(light.rgb, colorAndDensityFront.a + colorAndDensityBack.a);
}

//Write Out Final Scattering Value
void WriteOutput(in uint3 pos, in float4 colorAndDensity, in float depth)
{
    float density = colorAndDensity.a;
    float3 color = colorAndDensity.rgb;

    float4 finalValue = float4(color.rgb, exp(-density));
    Result[pos].rgba = finalValue;
}

void Insert(){
    for (int xx = 0; xx < size.x; xx++) {
        for (int yy = 0; yy < size.y; yy++) {
            for (int zz = 0; zz < size.z; zz++) {
            DensityBuffer[uint3(xx,yy,zz)] = insetValue;
            }
        }
    }
}

float3 EvaluateLight(float extinction, float intervalLength, float3 voxelCoordBuffer)
{
    float4 lightColor = LOAD_TEXTURE3D(LightBuffer, voxelCoordBuffer);
    //float4 lightColor = float4(0.5,0.5,0.5,1);
    //transmittance from optical depth
    float weight =  exp(-(extinction * intervalLength));
    //weight=1;
    float ligtIntensity = lightColor.a;
    return (weight * lightColor.rgb); //is it falloff?
}

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{    
    if(EarlyOut(id, size))
        return;

    float sliceDepthNear = depths[0];
    float3 totalRadiance = 0;
    float  opticalDepth  = 0;
   
    for(uint z = 1; z < VOLUME_DEPTH;z++)
    {
        float sliceDepthFar = depths[z];
        float sliceDepthDelta = sliceDepthFar - sliceDepthNear;
        float sliceDepthDeltaWorld = sliceDepthDelta*100;//TODO 100 camera range?
        
        uint3 voxelCoordBuffer = uint3(id.x,id.y, z);
        float4 density = LOAD_TEXTURE3D(DensityBuffer, voxelCoordBuffer);

        float3 fogColor = density.rgb;
        float  extinction = density.a;
        
        float3 light = EvaluateLight(extinction, sliceDepthDelta, voxelCoordBuffer);
        float currentOpticalDepth = extinction * sliceDepthDelta;
        
        float transmittance = exp(-opticalDepth);
        totalRadiance += transmittance * fogColor * light * sliceDepthDeltaWorld;
        
        opticalDepth += 0.5 * currentOpticalDepth;
        Result[voxelCoordBuffer] = float4(totalRadiance, opticalDepth);
        opticalDepth += 0.5 * currentOpticalDepth;
        
        sliceDepthNear = sliceDepthFar;
    }
 
}
