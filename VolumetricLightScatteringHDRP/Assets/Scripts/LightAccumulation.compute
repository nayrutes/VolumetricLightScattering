// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define M_PI 3.1415926535897932384626433832795

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture3D<float4> lightBufferTexture;

Texture2D<float4> LightDepth;
SamplerState samplerLightDepth;
float4 lightWS;

float4x4 vp;
float4x4 convertTo01;
StructuredBuffer<float4> points;
float4 Input_TexelSize;
float4 cameraPosWS;
int scatteringFunction;
float forBackScat;


bool EarlyOut(uint3 id, float4 size)
{
    return (id.x >= size.x || id.y >= size.y || id.z >= size.z);
}

//singleFroxel.z * (amount.x * amount.y) + singleFroxel.y * amount.x + singleFroxel.x
uint flat(uint3 id)
{
    return id.z * (Input_TexelSize.x * Input_TexelSize.y) + id.y * Input_TexelSize.x + id.x;
}

float IsotropicPhase(){
    return 1/(4*M_PI);
}

//radians 
float RayleighPhase(float angle)
{
    float cosTmp = cos(angle);
    return (3/(16*M_PI)) * (1 + cosTmp*cosTmp);
}
//radian, [-1,1]
float HenyeyGreensteinPhase(float angle, float forBackScat)
{
    float g2 = forBackScat*forBackScat;
    return (1-g2)/4*M_PI*pow((1+g2-2*forBackScat*cos(angle)),1.5);
}

float SchlickPhase(float angle, float forBackScat)
{
    float k2 = forBackScat*forBackScat;
    float part = 1 + forBackScat*cos(angle);
    return (1-k2)/(4*M_PI*(part*part));
}

[numthreads(8,8,16)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
     if(EarlyOut(id, Input_TexelSize))
        return;
    // TODO: insert actual code here!
    //Calculate Light influence on voxel (sample shadowmap?)
//    Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
    
    //RemoveLater?
    //Input[id] = float4(0,0.1,0.1,0.1);
    //uint index = flat(id);
    //float4 p = points[index];
    
    lightBufferTexture[id] = float4(0.1,0.1,0.1,0.05);//Ambient light
    lightBufferTexture[id] = float4(0,0,0,0);
    //for each light
    float4 pointWS = points[flat(id)];
    float4 pointProjected = mul(vp, pointWS);
    pointProjected = pointProjected/pointProjected.w;
    bool inside = (pointProjected.z <= 1 && pointProjected.z >= -1 && pointProjected.x <= 1 && pointProjected.x >= -1 &&
                         pointProjected.y <= 1 && pointProjected.y >= -1);
    
    pointProjected = mul(convertTo01,pointProjected);
    float depth = LightDepth.SampleLevel(samplerLightDepth,pointProjected.xy,0).r;
    //float depth = tex2D(samplerLightDepth, pointProjected.xy).r;
    float3 pointToLightRay = lightWS-pointWS;
    float pointToLightDistance = distance(pointWS.xyz,lightWS.xyz);
    float3 pointToCam = cameraPosWS-lightWS;
   
   //---Phase functions---
    float phase = 0;
    if(scatteringFunction <1)
    {
        phase = IsotropicPhase();
    }else
    {
        float3 pointToLightRayN = normalize(pointToLightRay);
        float3 pointToCamN = normalize(pointToCam);
        float angle = acos(dot(-pointToLightRayN, pointToCamN));
        
        if(scatteringFunction < 2)
        {
            phase = RayleighPhase(angle);
        }else if(scatteringFunction < 3)
        {
            phase = HenyeyGreensteinPhase(angle, forBackScat);
        }else{
            phase = SchlickPhase(angle, forBackScat);
        }
    }
    
    
    if(inside){
        if(1-depth < pointProjected.z)
        {
            
        }else{
            float4 old = lightBufferTexture[id];
            float3 color = old.rgb;
            float intensity =100;
            float3 newColor =float3(0.5,0.5,0.5);
            
            pointToLightDistance = sqrt(pointToLightDistance);
            
            //transmittance from optical depth
            float weight =  exp(-(pointToLightDistance));
            //weight = 1;
            intensity *= weight;
            //color += intensity*(newColor.rgb);
            //color = color/(intensity+old);
            //intensity = (intensity +old.a);
            color = saturate(intensity * newColor * phase);
            intensity = clamp(intensity,0,1);
            lightBufferTexture[id] = float4(color.rgb, intensity);//set light color and intensity
            //lightBufferTexture[id]  = float4(0.5,0.5,0.5,1);
        }
    }else
    {
        //lightBufferTexture[id] = float4(0,0,0,0);
    }
    //Result[id] = float4(depth,depth,depth,1);
    //Result[id] = LightDepth.SampleLevel(samplerLightDepth,pointProjected.xy,0).a;
    //points all 0!?!?
    //float4 t = float4(1 - points[flat(id)].xyz, 0.5);//+float4(1,1,1,0);
    //Result[id] = t;
    //Result[id] = float4(normalize(Input[id].xyz),0.5);
    //Result[id] = float4(id.x & id.y, (id.x & 15)/15.0, (id.z & 15)/15.0, 1.0);
    //Result[id] = LightDepth[id.xy];
}
